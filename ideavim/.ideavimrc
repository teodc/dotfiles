""" https://github.com/JetBrains/ideavim/wiki

" ------------------------------------------------------------------------------
" Options
" ------------------------------------------------------------------------------

syntax on " Enable syntax processing
filetype plugin indent on " Enable filetype plugins

" Define leader keys
let mapleader=" "
let maplocalleader=" "

set breakindent " Enbale indent on break
"set colorcolumn=120 " Show a visual guide
set cursorline " Highlight current line
set fileformat=unix " File format
set fileencoding=utf-8 " Output encoding of the file that is written
set history=5000 " Number of history lines to remember
set hlsearch " Highlight search matches
set ignorecase " Ignore case when searching
set incsearch " Show where search pattern typed so far matches
set list " Show certain whitespace characters in the editor
set matchpairs="(:),{:},[:]" " Pairs of characters that % can match
set nomore " Listings don't pause when the screen is filled
set nostartofline " Prevent some commands to move the cursor at the start of the line
set novisualbell " No annoying flash on errors
set nowrap " Don't wrap lines
set number relativenumber " Show hybrid line numbers
set scroll=0 " Scroll half the window height
set scrolloff=5 " Minimal number of screen lines to keep above and below the cursor
set shell=/bin/zsh " The shell to use to execute commands with ! and :!
set showcmd " Show the (partial) command as itâ€™s being typed
set showmatch " Highlight matching bracket
set showmode " Show the current mode
set sidescroll=0 " Minimal number of columns to scroll horizontally
set sidescrolloff=10 " Minimal number of columns to keep to the left and to the right of the cursor
set smartcase " When searching, try to be smart about cases
set timeout " Wait for key codes
set timeoutlen=300 " Time to wait for key codes
set ttyfast " Optimize for fast terminal connections
set viminfo+=! " Information to remember after restart
set virtualedit=none " Prevent cursor to be positioned where there is no character
set wrapscan " Search will wrap around the end of file

" Configure clipboard
set clipboard=""
set clipboard+=unnamed
set clipboard+=unnamedplus
set clipboard+=ideaput

" Configure backups, swaps, and undos
set nobackup
set writebackup
set backupdir=~/.vim/backups
set noswapfile
set directory=~/.vim/swaps
set undofile
set undodir=~/.vim/undo
set undolevels=5000
set undoreload=5000

" Hyphenated & underscored words recognized while searching
set iskeyword+=-
set iskeyword+=_

" IdeaVim only commands
set ideajoin " Extended join behaviors (https://github.com/JetBrains/ideavim/wiki/ideajoin-examples)
set ideamarks " Maps Vim's global marks to IDE bookmarks
set idearefactormode=keep " Specifies the mode to be used when a refactoring selects text to be edited (keep|select|visual)
set ideastatusicon=enabled " Behavior of IdeaVim icon in the status bar (enabled|gray|disabled)
set ideawrite=all " Defines the behaviour of the :w command (file|all)
"set ideaglobalmode " Share a single mode across all open windows
"set trackactionids " Track the current IDE action and display the action name in a notification

" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------

" Quickscope
" See: https://plugins.jetbrains.com/plugin/19417-ideavim-quickscope
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" EasyMotion
" See: https://github.com/easymotion/vim-easymotion
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0
nmap <leader>f <Plug>(easymotion-bd-f)
nmap <leader>F <Plug>(easymotion-bd-f2)
nmap <leader>t <Plug>(easymotion-bd-t)
nmap <leader>T <Plug>(easymotion-bd-t2)

" NERDTree
" See: https://github.com/preservim/nerdtree
" Usage:
"  o      Open files, directories and bookmarks
"  go     Open selected file, but leave cursor in the NERDTree
"  t      Open selected node/bookmark in a new tab
"  T      Same as 't' but keep the focus on the current tab
"  i      Open selected file in a split windo
"  gi     Same as i, but leave the cursor on the NERDTree
"  s      Open selected file in a new vsplit
"  gs     Same as s, but leave the cursor on the NERDTree
"  O      Recursively open the selected directory
"  x      Close the current nodes parent
"  X      Recursively close all children of the current node
"  P      Jump to the root node
"  p      Jump to current nodes parent
"  K      Jump up inside directories at the current tree depth
"  J      Jump down inside directories at the current tree depth
"  <C-J>  Jump down to next sibling of the current directory
"  <C-K>  Jump up to previous sibling of the current directory
"  r      Recursively refresh the current directory
"  R      Recursively refresh the current root
"  m      Display the NERDTree menu
"  q      Close the NERDTree window
"  A      Zoom (maximize/minimize) the NERDTree window
"  d      Delete file or directory
"  n      Create File
"  N      Create Directory
Plug 'preservim/nerdtree'
" let g:NERDTreeHijackNetrw = 0
" let g:NERDTreeShowHidden = 1
" let g:NERDTreeFileLines = 1
nmap - :NERDTreeFind<CR>
" nmap <C-t>? :NERDTree<CR>
" nmap <C-t>? :NERDTreeRefreshRoot<CR>
" nmap <C-t>? :NERDTreeToggle<CR>
" nmap <C-t>? :NERDTreeFocus<CR>
" nmap <C-t>? :NERDTreeClose<CR>

" Surround
" See: https://github.com/tpope/vim-surround
" Usage:
"   cs"'    Change surrounding "" to ''
"   cst"    Change surrounding tag to ""
"   ds"     Delete surrounding ""
"   dst     Delete surrounding tag
"   ysiw]   Wrap current word with [] (no spaces)
"   ysiw{   Wrap current word with {  } (with spaces)
"   yss<b>  Wrap current line with <b></b>
Plug 'tpope/vim-surround'

" " Multiple Cursors
" " See: https://github.com/mg979/vim-visual-multi
" Plug 'mg979/vim-visual-multi', {'branch': 'master'}
" let g:VM_mouse_mappings = 0
" let g:VM_default_mappings = 0
" let g:VM_maps = {}
" let g:VM_maps['Find Under'] = '<C-n>'
" let g:VM_maps['Find Subword Under'] = '<C-n>'
" let g:VM_maps['Select All'] = '<C-N>'

" Highlightedyank
" See: https://github.com/machakann/vim-highlightedyank
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 100
let g:highlightedyank_highlight_in_visual = 1

" Commentary
" See: https://github.com/tpope/vim-commentary
Plug 'tpope/vim-commentary'

" Indent Object
" See: https://github.com/michaeljsmith/vim-indent-object
" Usage:
"   ii  Indent level (no line above)
"   iI  Indent level (no lines above/below)
"   ai  Indent level plus one line above
"   aI  Indent level plus one line above and below
Plug 'michaeljsmith/vim-indent-object'

" " Exchange
" " See: https://github.com/tommcdo/vim-exchange
" " Usage:
" "   cx{motion}  On first use, define a {motion} to exchange. On second use, define another {motion} and perform the exchange.
" "   cxx         Like cx, but use the current line
" "   X           Like cx, but for Visual mode
" "   cxc         Clear any {motion} pending for exchange
" Plug 'tommcdo/vim-exchange'

" " Textobj Entire
" " See: https://github.com/kana/vim-textobj-entire
" " Usage:
" "   ae  Targets the entire content of the current buffer
" "   ie  Similar to ae, but does not include leading and trailing empty lines
" Plug 'kana/vim-textobj-user'
" Plug 'kana/vim-textobj-entire'

" " Argtextobj
" " See: https://www.vim.org/scripts/script.php?script_id=2699
" " Usage:
" "   aa  Parameter and the next comma if first parameter, otherwise parameter and the previous coma
" "   ia  The parameter only
" Plug 'vim-scripts/argtextobj.vim'

" Paragraph Motion
" See: https://github.com/dbakker/vim-paragraph-motion
Plug 'dbakker/vim-paragraph-motion'

" " Matchit
" " See: https://github.com/chrisbra/matchit
" Plug 'chrisbra/matchit'

" ------------------------------------------------------------------------------
"  Remaps
" ------------------------------------------------------------------------------

" Unmap space key
nnoremap <Space> <NOP>
vnoremap <Space> <NOP>

" ESC also clears search results
nnoremap <Esc> :nohlsearch<CR><Esc>

" This stays between us
nnoremap <C-c> <Esc>
inoremap <C-c> <Esc>
vnoremap <C-c> <Esc>

" Save & close
nnoremap <C-s> :w<CR>
nnoremap <C-q> :q<CR>
"nnoremap <C-x> :qa<CR>

" " Open Netrw
" nnoremap <C-e> :Explore<CR>

" Center screen when navigating search results
nnoremap n nzzzv
nnoremap N Nzzzv

" Center screen when scrolling
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap <C-b> <C-b>zz
nnoremap <C-f> <C-f>zz

" Easily move to beginning/end of line
nnoremap L $
vnoremap L $
nnoremap H ^
vnoremap H ^

" " Easily move to next/previous paragraph
" nnoremap J }
" vnoremap J }
" nnoremap K {
" vnoremap K {

" " Move line or visual block up/down
" nnoremap <C-j> :mo +1<CR>
" vnoremap <C-j> :mo '>+1<CR>gv
" nnoremap <C-k> :mo -2<CR>
" vnoremap <C-k> :mo '<-2<CR>gv

" " Indent/outdent line or visual block
" nnoremap <C-h> <<
" vnoremap <C-h> <gv
" nnoremap <C-l> >>
" vnoremap <C-l> >gv

" Keep selection when indenting
vnoremap < <gv
vnoremap > >gv

" Delete single character whitout yanking
nnoremap x "_x
vnoremap x "_x

" C without replacing clipboard selection
nnoremap c "_c
vnoremap C "_C
nnoremap c "_c
vnoremap C "_C

" Delete without yanking to the clipboard
nnoremap <leader>d "_d
vnoremap <leader>d "_d
nnoremap <leader>D "_D

" " Yank into the system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" " Paste from the system clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P

" Paste without replacing clipboard selection
xnoremap <leader>p "_dP

" Merge line bellow with the current one without moving the cursor
nnoremap J mzJ`z

" " Copy the line/selection to the line bellow
" nnoremap <leader>c :copy .<CR>
" vnoremap <leader>c :copy '><CR>gv

" " Comment line or visual block
" nnoremap <leader>m <Plug>CommentaryLine
" vnoremap <leader>m <Plug>Commentary

" Windows (aka splits)
" Create a new horizontal/vertical split
nnoremap <leader>wh :new<CR>
nnoremap <leader>wv :vnew<CR>
" Make all splits equal height & width
nnoremap <leader>we :wincmd =<CR>
" Close current split
nnoremap <leader>wq :wincmd q<CR>
" Navigate between splits
nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>l :wincmd l<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>j :wincmd j<CR>
" Rezise window with arrows
nnoremap <Up> :resize -2<CR>
nnoremap <Down> :resize +2<CR>
nnoremap <Left> :vertical resize -2<CR>
nnoremap <Right> :vertical resize +2<CR>

" Buffers
" Create a new empty buffer
nnoremap <leader>bc :enew<CR>
" Open file in new buffer
nnoremap <leader>bo :edit <Space>
" List all opened buffers & offer to move to one of them
nnoremap <Leader>bl :buffers<CR>:buffer<Space>
" Go to the next/previous buffer
nnoremap <leader>bn :bnext<CR>
nnoremap <leader>bp :bprevious<CR>
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>
" Close buffer
nnoremap <leader>bq :bdelete<CR>

" " Tabs
" " Open a new tab
" nnoremap <leader>tc :tabnew<CR>
" " Move to the next/previous tab
" nnoremap <leader>tn :tabnext<CR>
" nnoremap <leader>tp :tabprevious<CR>
" " Close the current tab and all its windows
" nnoremap <leader>tq :tabclose<CR>
" " Close all tabs except for the current one
" nnoremap <leader>tx :tabonly<CR>

" " Remap number increment & decrement
" nnoremap <C-?> <C-a>
" vnoremap <C-?> <C-a>gv
" nnoremap <C-?> <C-x>
" vnoremap <C-?> <C-x>gv

" ------------------------------------------------------------------------------
" IDE Actions
" ------------------------------------------------------------------------------

" Edit & reload the IdeaVim config
map \e :e ~/.ideavimrc<CR>
map \r <Action>(IdeaVim.ReloadVimRc.reload)

" Toggle Zen mode
map <leader>z <Action>(ToggleDistractionFreeMode)

" Tool panes
"map ? <Action>(ActivateProjectToolWindow)
"map ? <Action>(ActivateBookmarksToolWindow)
"map ? <Action>(ActivateStructureToolWindow)
"map ? <Action>(ActivateTODOToolWindow)
"map ? <Action>(ActivateProblemsViewToolWindow)
"map ? <Action>(Activategithub.copilotToolWindowToolWindow)
"map ? <Action>(ActivateTerminalToolWindow)
"map ? <Action>(ActivateCommitToolWindow)
"map ? <Action>(ActivateVersionControlToolWindow)
"map ? <Action>(ActivateNotificationsToolWindow)
"map ? <Action>(HideAllWindows)

" Files
map <leader>n <Action>(NewElement)
map <leader>r <Action>(RecentFiles)

" Find & replace
map <leader>/ <Action>(FindInPath)
map <leader>x <Action>(ReplaceInPath)

" Quick selection
map <C-f> <Action>(EditorSelectWord)
map <C-b> <Action>(EditorUnSelectWord)
map <C-n> <Action>(SelectNextOccurrence)
map <C-p> <Action>(UnselectPreviousOccurrence)
map <C-a> <Action>(SelectAllOccurrences)

" Navigate code
map <leader>a <Action>(ShowNavBar)
map <leader>s <Action>(FileStructurePopup)
map <leader>gs <Action>(GotoSymbol)
map <leader>ga <Action>(GotoAction)
map <leader>gc <Action>(GotoClass)
map <leader>gf <Action>(GotoFile)
map <leader>gd <Action>(GotoDeclaration)
map <leader>gt <Action>(GotoTypeDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gm <Action>(GotoSuperMethod)
map <leader>gu <Action>(FindUsages)

" Cursor jumps
map s <Action>(AceAction)
map <leader>[ <Action>(Back)
map <leader>] <Action>(Forward)
map [c <Action>(JumpToLastChange)
map ]c <Action>(JumpToNextChange)
map [m <Action>(MethodUp)
map ]m <Action>(MethodDown)

" Move line/selection
map <C-k> <Action>(MoveLineUp)
map <C-j> <Action>(MoveLineDown)
map <C-l> <Action>(EditorIndentSelection)
map <C-h> <Action>(EditorUnindentSelection)

" Line operations
map <leader>o <Action>(EditorDuplicate)
map <leader>m <Action>(CommentByLineComment)

" Errors
map <leader>e <Action>(InspectCode)
map [e <Action>(GotoPreviousError)
map ]e <Action>(GotoNextError)

" Cleaning
map <leader>C <Action>(ReformatCode)
map <leader>cd <Action>(ShowReformatFileDialog)
map <leader>cc <Action>(CodeCleanup)
map <leader>ci <Action>(OptimizeImports)
map <leader>ca <Action>(AutoIndentLines)

" Refactoring
map <leader>R <Action>(Refactorings.QuickListPopupAction)
map <leader>rn <Action>(RenameElement)
map <leader>rs <Action>(ChangeSignature)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)

" Code actions
map <leader>i <Action>(ShowIntentionActions)
map <leader>q <Action>(QuickImplementations)
map <leader>g <Action>(Generate)

" Completion
"map <leader>? <Action>(CodeCompletion)
"map <leader>? <Action>(SmartTypeCompletion)
"map <leader>? <Action>(EditorCompleteStatement)
"map K <Action>(QuickJavaDoc)

" Splits
"...

" Tabs
"map ? <Action>(NextTab)
"map ? <Action>(PreviousTab)
"map ? <Action>(CloseEditor)
"map ? <Action>(CloseAllEditors)
map <C-x> <Action>(CloseAllEditorsButActive)

" Expand/collapse
"map <leader>? <Action>(ExpandCollapseToggleAction)
"map <leader>? <Action>(CollapseRegion)
"map <leader>? <Action>(ExpandRegion)
"map <leader>? <Action>(CollapseAllRegions)
"map <leader>? <Action>(ExpandAllRegions)

" Git
map <leader>V <Action>(Vcs.QuickListPopupAction)
map <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>vr <Action>(ChangesView.Revert)
map <leader>vd <Action>(Git.CompareWithBranch)
map <leader>vc <Action>(Git.ResolveConflicts)

" Copilot
"map <leader>? <Action>(copilot.enableCopilot)
"map <leader>? <Action>(copilot.disableCopilot)
"map <leader>? <Action>(copilot.requestCompletion)
"map <leader>? <Action>(copilot.applyInlays)
"map <leader>? <Action>(copilot.cycleNextInlays)
"map <leader>? <Action>(copilot.cyclePrevInlays)

" Resolve IDE shortcut conflicts
sethandler <C-a> a:vim
sethandler <C-b> a:vim
sethandler <C-c> a:vim
sethandler <C-d> a:vim
sethandler <C-e> a:vim
sethandler <C-f> a:vim
sethandler <C-g> a:vim
sethandler <C-h> a:vim
sethandler <C-i> a:vim
sethandler <C-j> a:vim
sethandler <C-k> a:vim
sethandler <C-l> a:vim
sethandler <C-m> a:vim
sethandler <C-n> a:vim
sethandler <C-o> a:vim
sethandler <C-p> a:vim
sethandler <C-q> a:vim
sethandler <C-r> a:vim
sethandler <C-s> a:vim
sethandler <C-t> a:vim
sethandler <C-u> a:vim
sethandler <C-v> a:vim
sethandler <C-w> a:vim
sethandler <C-x> a:vim
sethandler <C-y> a:vim
sethandler <C-z> a:vim

