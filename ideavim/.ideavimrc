" ------------------------------------------------------------------------------
" Options
" ------------------------------------------------------------------------------

" Define map leader key
let mapleader=" "
let maplocalleader=" "

" Use a bar cursor within insert mode and a block cursor everywhere else
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Show hybrid line numbers
set number relativenumber

" Show the (partial) command as itâ€™s being typed
set showcmd

" Set number of history lines to remember
set history=5000

" Search as characters are entered
set incsearch

" Highlight matches
set hlsearch

" Listings don't pause when the screen is filled
set nomore

" Ignore case when searching
set ignorecase

" Use visual bell instead of beeping
set novisualbell

" When searching, try to be smart about cases
set smartcase

" Configure backups & swap files
set nobackup
set writebackup
set backupdir=~/.vim/backups
set noswapfile
set directory=~/.vim/swaps

" Configure undo
set undofile
set undodir=~/.vim/undo
set undolevels=5000
set undoreload=5000

" Some commands move the cursor to the start of the line
set startofline

" Default clipboard
set clipboard="ideaput"

" Default 'g' flag for ':s'
set gdefault

" ???
set viminfo+=!

" Show the current mode
set showmode

" Vertical & horizontal scrolling behavior
set scroll=0
set scrolloff=10
set sidescroll=0
set sidescrolloff=10

" Time to wait for key codes
set timeout
set timeoutlen=300

""" IdeaVim only commands
" Keep the mode that was enabled before starting a refactoring
set idearefactormode=keep
" Behavior of IdeaVim icon in the status bar
set ideastatusicon=gray
" Execution of :wa (save all) command on :w (save)
set ideawrite=all
" Define the list of additional buffers where IdeaVim is enabled
set ideavimsupport=dialog
" Extended join behaviors (https://github.com/JetBrains/ideavim/wiki/ideajoin-examples)
set ideajoin

" ------------------------------------------------------------------------------
" Plugins
" ------------------------------------------------------------------------------

""" Quickscope
" See: https://plugins.jetbrains.com/plugin/19417-ideavim-quickscope
set quickscope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

""" EasyMotion
" See: https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands
Plug 'easymotion/vim-easymotion'
let g:EasyMotion_do_mapping = 0
nmap <leader>f <Plug>(easymotion-bd-f)
nmap <leader>F <Plug>(easymotion-bd-f2)
nmap <leader>t <Plug>(easymotion-bd-t)
nmap <leader>T <Plug>(easymotion-bd-t2)

""" NERDTree
" Basic Usage:
"   Ctrl-t  Open NERDTree (mapped bellow)
"   q       Close the NERDTree window
"   o       Open files, directories and bookmarks
"   go      Open selected file, but leave cursor in the NERDTree
"   i       Open selected file in a split window
"   gi      Same as i, but leave the cursor on the NERDTree
"   s       Open selected file in a new vsplit
"   gs      Same as s, but leave the cursor on the NERDTree
"   O       Recursively open the selected directory
"   x       Close the current nodes parent
"   X       Recursively close all children of the current node
"   P       Jump to the root node
"   p       Jump to current nodes parent
"   <C-J>   Jump down to next sibling of the current directory
"   <C-K>   Jump up to previous sibling of the current directory
"   R       Recursively refresh the current root
"   m       Display the NERDTree menu
" See: https://github.com/JetBrains/ideavim/wiki/NERDTree-support#supported-commands
Plug 'preservim/nerdtree'
let NERDTreeHijackNetrw = 0
let NERDTreeShowHidden = 1
nmap <C-t> :NERDTreeFind<CR>
"nmap <C-t>? :NERDTree<CR>
"nmap <C-t>? :NERDTreeRefreshRoot<CR>
"nmap <C-t>? :NERDTreeToggle<CR>
"nmap <C-t>? :NERDTreeFocus<CR>

""" Surround
" Basic Usage:
"   cs"'    Change surrounding "" to ''
"   cst"    Change surrounding tag to ""
"   ds"     Delete surrounding ""
"   dst     Delete surrounding tag
"   ysiw]   Wrap current word with [] (no spaces)
"   ysiw{   Wrap current word with {  } (with spaces)
"   yss<b>  Wrap current line with <b></b>
" See: https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'

""" Multiple Cursors
" Basic Usage:
"   <C-n> Start multicursor
"   <C-n> Next match
"   <C-x> Skip next match
"   <C-p> Remove current match and go back to previous one
"   <C-m> Select all matches
" See: https://github.com/terryma/vim-multiple-cursors
"Plug 'terryma/vim-multiple-cursors'
"let g:multi_cursor_support_imap = 0
"let g:multi_cursor_start_word_key = '<C-n>'
"let g:multi_cursor_select_all_word_key = '<C-m>'
"let g:multi_cursor_start_key = 'g<C-n>'
"let g:multi_cursor_select_all_key = 'g<C-m>'
"let g:multi_cursor_next_key = '<C-n>'
"let g:multi_cursor_prev_key = '<C-p>'
"let g:multi_cursor_skip_key = '<C-x>'
"let g:multi_cursor_quit_key = '<Esc>'

""" Highlightedyank
" See: https://github.com/machakann/vim-highlightedyank
Plug 'machakann/vim-highlightedyank'
let g:highlightedyank_highlight_duration = 100
let g:highlightedyank_highlight_in_visual = 0

""" Commentary
" Basic Usage:
"   gc{motion}  Comment or uncomment lines that {motion} moves over
"   gcc         Comment or uncomment [count] lines
"   {visual}gc  Comment or uncomment the highlighted lines
"   gc          Text object for a comment (operator pending mode only)
"   gcgc        Uncomment the current and adjacent commented lines
"   gcu
" See: https://github.com/tpope/vim-commentary
Plug 'tpope/vim-commentary'

""" Indent Object
" Basic Usage:
"   ii  Indent level (no line above)
"   iI  Indent level (no lines above/below)
"   ai  Indent level plus one line above
"   aI  Indent level plus one line above and below
" Examples:
"   gcii  Comment all the instructions inside the same indent level
"   dai   Delete an if statement and all its instructions
" See: https://github.com/michaeljsmith/vim-indent-object
Plug 'michaeljsmith/vim-indent-object'

""" Exchange
" Basic Usage:
"   cx{motion}  On first use, define a {motion} to exchange. On second use, define another {motion} and perform the exchange.
"   cxx         Like cx, but use the current line
"   X           Like cx, but for Visual mode
"   cxc         Clear any {motion} pending for exchange
" See: https://github.com/tommcdo/vim-exchange
Plug 'tommcdo/vim-exchange'

""" Textobj Entire
" Basic Usage:
"   ae  Targets the entire content of the current buffer
"   ie  Similar to ae, but does not include leading and trailing empty lines
" See: https://github.com/kana/vim-textobj-entire
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-entire'

""" Argtextobj
" Basic Usage:
"   aa  Parameter and the next comma if first parameter, otherwise parameter and the previous coma
"   ia  The parameter only
" Examples:
"   daa  Delete an argument
"   cia  Change an argument
"   vai  Select an argument
" See: https://www.vim.org/scripts/script.php?script_id=2699
Plug 'vim-scripts/argtextobj.vim'
let g:argtextobj_pairs="[:],(:),<:>"

""" Paragraph Motion
" See: https://github.com/dbakker/vim-paragraph-motion
Plug 'dbakker/vim-paragraph-motion'

""" Matchit
" Basic Usage:
"   %   Cycle forward through matching groups as specified by b:match_words
"   g%  Cycle backwards through matching groups
"   [%  Go to [count] previous unmatched group (similar to [{)
"   ]%  Go to [count] next unmatched group (similar to ]})
"   a%  In Visual mode, select the matching group containing the cursor (similar to v_a[)
" See: https://github.com/chrisbra/matchit
Plug 'chrisbra/matchit'

" ------------------------------------------------------------------------------
"  Remaps
" ------------------------------------------------------------------------------

" Unmap space key
nnoremap <Space> <NOP>
vnoremap <Space> <NOP>

" This stays between us
inoremap <C-c> <Esc>
vnoremap <C-c> <Esc>

" Save & close current file
nnoremap <C-s> :w<CR>
nnoremap <C-q> :q<CR>

" Redraw screen and clear current search highlighting
nnoremap <C-z> :nohl<CR><C-l>

" Open Netrw
"nnoremap <C-t> :Explore<CR>

" Center screen when navigating search results
nnoremap n nzzzv
nnoremap N Nzzzv

" Center screen when moving it
nnoremap <C-u> <C-u>zz
nnoremap <C-d> <C-d>zz
nnoremap <C-b> <C-b>zz
nnoremap <C-f> <C-f>zz

" Delete without yanking to the clipboard
nnoremap <leader>d "_d
vnoremap <leader>d "_d

" Delete line without yanking it
"nnoremap <leader>D "_dd

" Yank into the system clipboard
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" Paste from the system clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P

" Paste without losing selection from the clipboard
xnoremap <leader>p "_dP

" Don't move cursor when using J
nnoremap J mzJ`z

" Append above line to current one
nmap K kddpkJ

" Move line or visual block up/down
"nnoremap <C-j> :mo +1<CR>
"nnoremap <C-k> :mo -2<CR>
"vnoremap <C-j> :mo '>+1<CR>gv
"vnoremap <C-k> :mo '<-2<CR>gv

" Indent/outdent line or visual block
"nnoremap <C-h> <<
"nnoremap <C-l> >>
"vnoremap <C-h> <gv
"vnoremap <C-l> >gv

" Duplicate line or visual block without yanking it
"nnoremap <leader>o :co .<CR>
"vnoremap <leader>o :co '><CR>gv

" Comment line or visual block
"nnoremap <leader>m <Plug>CommentaryLine
"vnoremap <leader>m <Plug>Commentary

""" Splits
" Create new splits
nnoremap <leader>- :new<CR>
nnoremap <leader>_ :vnew<CR>
" Make all windows equal height & width
nnoremap <leader>= <C-w>=
" Move cursor to the left/right/top/bottom window
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l
nnoremap <leader>k <C-w>k
nnoremap <leader>j <C-w>j
" Move the current split window into its own tab
"nnoremap <leader>? <C-w>T

""" Buffers
" Open new buffer
"nnoremap <leader>B :enew<CR>
" List all opened buffers & offer to move to one of them
"nnoremap <Leader>b :buffers<CR>:buffer<Space>
" Go to the next/previous buffer
"nnoremap L :bn<CR>
"nnoremap H :bp<CR>
" Delete buffer
"nnoremap <leader>q :bd<CR>

""" Tabs
" Open a new tab
"nnoremap <leader>+ :tabnew<CR>
" Move to the next/previous tab
"nnoremap <leader>] gt<CR>
"nnoremap <leader>[ gT<CR>
" Close the current tab and all its windows
"nnoremap <leader>w :tabc<CR>
" Close all tabs except for the current one
"nnoremap <leader>W :tabo<CR>

" ------------------------------------------------------------------------------
" IDE Actions
" ------------------------------------------------------------------------------

" Edit & reload the IdeaVim config
map \e :e ~/.ideavimrc<CR>
map \r <Action>(IdeaVim.ReloadVimRc.reload)

map <leader>z <Action>(ToggleDistractionFreeMode)

""" Tool windows
map <leader>1 <Action>(ActivateProjectToolWindow)
map <leader>2 <Action>(ActivateStructureToolWindow)
map <leader>3 <Action>(ActivateDatabaseToolWindow)
map <leader>4 <Action>(ActivateTerminalToolWindow)
map <leader>5 <Action>(ActivateProblemsViewToolWindow)
map <leader>6 <Action>(ActivateTODOToolWindow)
"map <leader>? <Action>(ActivateVersionControlToolWindow)
"map <leader>? <Action>(ActivateCommitToolWindow)
"map <leader>? <Action>(Activategithub.copilotToolWindowToolWindow)
map <leader>0 <Action>(ActivateNotificationsToolWindow)
map <leader>` <Action>(HideAllWindows)

""" Files
map <leader>t <Action>(NewFile)
map <leader>x <Action>(RecentFiles)
map <leader>! <Action>(SelectInProjectView)

""" Search
"map <leader>? <Action>(SearchEverywhere)
"map <leader>? <Action>(SearchEverywhere.NextTab)
"map <leader>? <Action>(SearchEverywhere.PrevTab)

"" Find & replace
map <leader>/ <Action>(Find)
map <leader>? <Action>(FindInPath)
map <leader>n <Action>(FindNext)
map <leader>N <Action>(FindPrevious)
map <leader>' <Action>(Replace)
map <leader>\" <Action>(ReplaceInPath)

""" Quick selection
map <C-v> <Action>(EditorSelectWord)
map <C-V> <Action>(EditorUnSelectWord)
map <C-n> <Action>(SelectNextOccurrence)
map <C-p> <Action>(UnselectPreviousOccurrence)
map <C-m> <Action>(SelectAllOccurrences)

""" Navigate code
map <leader>s <Action>(FileStructurePopup)
map <leader>gs <Action>(GotoSymbol)
map <leader>ga <Action>(GotoAction)
map <leader>gc <Action>(GotoClass)
map <leader>gf <Action>(GotoFile)
map <leader>gd <Action>(GotoDeclaration)
map <leader>gt <Action>(GotoTypeDeclaration)
map <leader>gi <Action>(GotoImplementation)
map <leader>gm <Action>(GotoSuperMethod)
map <leader>gu <Action>(FindUsages)

""" Cursor jumps
map [p <Action>(Back)
map ]p <Action>(Forward)
map [c <Action>(JumpToLastChange)
map ]c <Action>(JumpToNextChange)
map [m <Action>(MethodUp)
map ]m <Action>(MethodDown)

""" Move line/selection
map <C-k> <Action>(MoveLineUp)
map <C-j> <Action>(MoveLineDown)
map <C-l> <Action>(EditorIndentSelection)
map <C-h> <Action>(EditorUnindentSelection)

""" Line operations
map <leader>D <Action>(EditorDeleteLine)
map <leader>o <Action>(EditorDuplicate)
map <leader>m <Action>(CommentByLineComment)

""" Errors
map <leader>E <Action>(InspectCode)
map <leader>ep <Action>(GotoPreviousError)
map <leader>en <Action>(GotoNextError)

""" Cleaning
map <leader>C <Action>(ReformatCode)
map <leader>cf <Action>(ShowReformatFileDialog)
map <leader>cc <Action>(CodeCleanup)
map <leader>ci <Action>(OptimizeImports)
map <leader>ca <Action>(AutoIndentLines)

""" Refactoring
map <leader>R <Action>(Refactorings).QuickListPopupAction
map <leader>rn <Action>(RenameElement)
map <leader>rs <Action>(ChangeSignature)
map <leader>rm <Action>(ExtractMethod)
map <leader>rv <Action>(IntroduceVariable)

""" Code actions
map <leader>i <Action>(ShowIntentionActions)
map <leader>I <Action>(QuickImplementations)
map <leader>G <Action>(Generate)

""" Completion
map <leader>q <Action>(CodeCompletion)
map <leader>Q <Action>(SmartTypeCompletion)
map <leader>\ <Action>(EditorCompleteStatement)

""" Splits
"...

""" Tabs
map <leader>] <Action>(NextTab)
map L <Action>(NextTab)
map <leader>[ <Action>(PreviousTab)
map H <Action>(PreviousTab)
map <leader>w <Action>(CloseEditor)
map <leader>W <Action>(CloseAllEditorsButActive)
"map <leader>? <Action>(CloseAllEditors)
"map <leader>? <Action>(PinActiveEditorTab)

""" Expand/collapse
"map <leader>? <Action>(ExpandCollapseToggleAction)
"map <leader>? <Action>(CollapseRegion)
"map <leader>? <Action>(ExpandRegion)
"map <leader>? <Action>(CollapseAllRegions)
"map <leader>? <Action>(ExpandAllRegions)

""" Git
"map <leader>? <Action>(Vcs.QuickListPopupAction)

""" Copilot
"map <leader>? <Action>(copilot.enableCopilot)
"map <leader>? <Action>(copilot.disableCopilot)
"map <leader>? <Action>(copilot.requestCompletion)
"map <leader>? <Action>(copilot.applyInlays)
"map <leader>? <Action>(copilot.cycleNextInlays)
"map <leader>? <Action>(copilot.cyclePrevInlays)

""" Resolve IDE shortcut conflicts
sethandler <C-a> a:vim
sethandler <C-b> a:vim
sethandler <C-d> a:vim
sethandler <C-e> a:vim
sethandler <C-f> a:vim
sethandler <C-g> a:vim
sethandler <C-h> a:vim
sethandler <C-i> a:vim
sethandler <C-j> a:vim
sethandler <C-k> a:vim
sethandler <C-l> a:vim
sethandler <C-m> a:vim
sethandler <C-n> a:vim
sethandler <C-o> a:vim
sethandler <C-p> a:vim
sethandler <C-r> a:vim
sethandler <C-s> a:vim
sethandler <C-t> a:vim
sethandler <C-v> a:vim
sethandler <C-w> a:vim
